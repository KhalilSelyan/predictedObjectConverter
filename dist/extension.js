(()=>{"use strict";var __webpack_modules__={465:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.activate = void 0;\nconst colorMap = {\n    0: { r: 1.0, g: 1.0, b: 1.0, a: 0.5 },\n    1: { r: 1.0, g: 0.0, b: 0.0, a: 0.5 },\n    2: { r: 1.0, g: 0.5, b: 0.5, a: 0.5 },\n    3: { r: 0.0, g: 0.5, b: 1.0, a: 0.5 },\n    4: { r: 0.0, g: 0.5, b: 1.0, a: 0.5 },\n    5: { r: 1.0, g: 0.5, b: 0.5, a: 0.5 },\n    6: { r: 1.0, g: 1.0, b: 0.5, a: 0.5 },\n    7: { r: 0.75, g: 1.0, b: 0.25, a: 0.5 }, // PEDESTRIAN // green // hex: #BFFF40\n};\nvar Classification;\n(function (Classification) {\n    Classification[Classification["UNKNOWN"] = 0] = "UNKNOWN";\n    Classification[Classification["CAR"] = 1] = "CAR";\n    Classification[Classification["BICYCLE"] = 2] = "BICYCLE";\n    Classification[Classification["BUS"] = 3] = "BUS";\n    Classification[Classification["TRUCK"] = 4] = "TRUCK";\n    Classification[Classification["CYCLIST"] = 5] = "CYCLIST";\n    Classification[Classification["MOTORCYCLE"] = 6] = "MOTORCYCLE";\n    Classification[Classification["PEDESTRIAN"] = 7] = "PEDESTRIAN";\n})(Classification || (Classification = {}));\nfunction activate(extensionContext) {\n    extensionContext.registerMessageConverter({\n        fromSchemaName: "autoware_auto_perception_msgs/msg/PredictedObjects",\n        toSchemaName: "foxglove.SceneUpdate",\n        converter: (msg) => {\n            const { header, objects } = msg;\n            // create same thing but with spheres\n            const spherePrimitives = objects.reduce((acc, object) => {\n                const { kinematics, classification } = object;\n                const { initial_pose_with_covariance, predicted_paths } = kinematics;\n                if (classification.length === 0 ||\n                    !classification[0] ||\n                    classification[0].label === undefined) {\n                    return acc;\n                }\n                const { label } = classification[0];\n                const color = colorMap[label] ?? colorMap[0];\n                // if the object is not unknown and has a predicted path, draw the path\n                if (label !== Classification.UNKNOWN &&\n                    Math.floor(initial_pose_with_covariance.pose.position.x) > 0) {\n                    const spherePath = predicted_paths[0].path.map((pose) => {\n                        const sphere = {\n                            color,\n                            size: { x: 0.25, y: 0.25, z: 0.25 },\n                            pose,\n                        };\n                        return sphere;\n                    });\n                    acc.push(...spherePath);\n                }\n                return acc;\n            }, []);\n            const cubePrimitives = objects.reduce((acc, object) => {\n                const { kinematics, shape, classification } = object;\n                const { initial_pose_with_covariance } = kinematics;\n                const { position, orientation } = initial_pose_with_covariance.pose;\n                const { dimensions } = shape;\n                const { x, y } = dimensions;\n                if (classification.length === 0 ||\n                    !classification[0] ||\n                    classification[0].label === undefined) {\n                    return acc;\n                }\n                const { label } = classification[0];\n                const color = colorMap[label] ?? colorMap[0];\n                const predictedObjectCube = {\n                    color,\n                    size: { x, y, z: 0.1 },\n                    pose: {\n                        position: {\n                            x: position.x,\n                            y: position.y,\n                            // make the cube start at the ground level (z = 0)\n                            z: position.z - 0.5 * dimensions.z,\n                        },\n                        orientation,\n                    },\n                };\n                acc.push(predictedObjectCube);\n                return acc;\n            }, []);\n            /*   // create a text primitive for the predicted objects cube according to their position and label/color\n            const cubeTexts: TextPrimitive[] = objects.reduce((acc: TextPrimitive[], object) => {\n              const { kinematics, classification } = object;\n              const { initial_pose_with_covariance } = kinematics;\n      \n              if (\n                classification.length === 0 ||\n                !classification[0] ||\n                classification[0].label === undefined\n              ) {\n                return acc;\n              }\n      \n              const { label } = classification[0];\n              const color = colorMap[label as keyof typeof colorMap] ?? colorMap[0];\n      \n              const text: TextPrimitive = {\n                color,\n                text: Classification[label as keyof typeof colorMap]!,\n                billboard: true,\n                pose: initial_pose_with_covariance.pose,\n                font_size: 24,\n                scale_invariant: true,\n              };\n      \n              acc.push(text);\n              return acc;\n            }, []); */\n            const sceneUpdateMessage = {\n                deletions: [],\n                entities: [\n                    {\n                        id: "predicted_objects",\n                        timestamp: header.stamp,\n                        frame_id: header.frame_id,\n                        frame_locked: false,\n                        lifetime: { sec: 1, nsec: 0 },\n                        metadata: [],\n                        arrows: [],\n                        cylinders: [],\n                        lines: [],\n                        spheres: spherePrimitives,\n                        texts: [],\n                        triangles: [],\n                        models: [],\n                        cubes: cubePrimitives,\n                    },\n                ],\n            };\n            return sceneUpdateMessage;\n        },\n    });\n}\nexports.activate = activate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///465\n')}},__webpack_exports__={};__webpack_modules__[465](0,__webpack_exports__),module.exports=__webpack_exports__})();